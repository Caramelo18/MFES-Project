class JyveTest
	values
	-- TODO Define values here
	instance variables
		ab:	AdvertisingBoard := new AdvertisingBoard();
	operations
		private assertTrue: bool ==> ()
    assertTrue(cond) == return
    pre cond;
    
    private assertFalse: bool ==> ()
    assertFalse(cond) == return
    pre not cond;
    
    private assertEqual: ? * ? ==> ()
    assertEqual(expected, actual) == return
--        if expected <> actual then (
--              IO`print("Actual value (");
--              IO`print(actual); 
--              IO`print(") different from expected (");
--              IO`print(expected);
--              IO`println(")\n");
--        )
    post expected = actual;
    
    private testArtist: () ==> ()
    testArtist() == (
    	dcl a1: Artist, result: bool;
    	a1 := new Artist("Artist 1");
    	
    	assertEqual("Artist 1", a1.getName());
    	
    	result := a1.playsInstrument(<Guitar>);
    	assertFalse(result);
    	
    	a1.addInstrument(<Guitar>);
    	result := a1.playsInstrument(<Guitar>);
    	assertTrue(result);
    	
    	result := a1.playsInstrument(<Bagpipes>);
    	assertFalse(result);
    	
    	a1.addInstrument(<Bagpipes>);
    	result := a1.playsInstrument(<Bagpipes>);
    	assertTrue(result);
    	result := a1.playsInstrument(<Guitar>);
    	assertTrue(result);
    	
    	a1.deleteInstrument(<Guitar>);
    	result := a1.playsInstrument(<Bagpipes>);
    	assertTrue(result);
    	result := a1.playsInstrument(<Guitar>);
    	assertFalse(result);
    	
    );
    
    private testAddArtistOffer: () ==> ()
    testAddArtistOffer() == (
    	dcl a1: Artist, a2: Artist, ao1: ArtistOffer, ao2: ArtistOffer;
    	a1 := new Artist("Artist 1");
    	a1.addInstrument(<Guitar>);
			ao1:= new ArtistOffer(a1);
			
			a2 := new Artist("Artist 2");
			a2.addInstrument(<Guitar>);
			a2.addInstrument(<Saxophone>);
			ao2:= new ArtistOffer(a2);
			
			assertEqual({}, ab.listArtistOffers());
			
			ab.addArtistOffer(ao1);
			ab.addArtistOffer(ao2);
			assertEqual({ao1, ao2}, ab.listArtistOffers());
			
			assertEqual({}, ab.listArtistOffers(<Bagpipes>));
			assertEqual({ao1, ao2}, ab.listArtistOffers(<Guitar>));
			assertEqual({ao2}, ab.listArtistOffers(<Saxophone>));
			
    );
    
    private testBand: () ==> ()
    testBand() == (
    	dcl b1: Band;
    	b1 := new Band("Band 1");
    	
    	assertEqual("Band 1", b1.getName());
    	assertEqual({}, b1.getGenres());
    	
    	b1.addGenre(<Rock>);
    	assertEqual({<Rock>}, b1.getGenres());
    	b1.addGenre(<Metal>);
    	assertEqual({<Rock>, <Metal>}, b1.getGenres());
    	b1.deleteGenre(<Rock>);
    	assertEqual({<Metal>}, b1.getGenres());    	
    );
    
    private testBandRole: () ==> ()
    testBandRole() == (
    	dcl b1: Band, b2: Band, br1: BandRole, br2: BandRole, br3: BandRole;
    	b1 := new Band("Band 1");
    	b2 := new Band("Band 2");
    	
    	br1 := new BandRole(b1, <Saxophone>);
    	br2 := new BandRole(b2, <Drums>);
    	br3 := new BandRole(b1, <DJ>);
    	
    	assertEqual({}, ab.listBandRoleOffers());
    	
    	assertEqual({}, ab.listBandRoleOffers(<DJ>));
    	
    	ab.addBandRoleOffer(br1);
    	ab.addBandRoleOffer(br2);
    	ab.addBandRoleOffer(br3);
    	
    	assertEqual({br1, br2, br3}, ab.listBandRoleOffers());
    	assertEqual({br2}, ab.listBandRoleOffers(<Drums>));
    	assertEqual({}, ab.listBandRoleOffers(<Xylophone>));
    );
    
    private testGig: () ==> ()
    testGig() == (
    	dcl b1: Band, b2: Band, po: PlaceOwner, v: Venue, d1: Utilitys`Date, d2: Utilitys`Date, g1: Gig, g2: Gig, result: bool;
    	b1 := new Band("Band 1");
    	b2 := new Band("Band 2");
    	
    	po := new PlaceOwner("Place Owner");
    	
    	v := new Venue(po, "Montijo Portugal", 100, 15000, "Great", "Great");
    	
    	d1 := mk_Utilitys`Date(2017, 12, 31);
    	d2 := mk_Utilitys`Date(2018, 01, 01);
    	
    	g1 := new Gig(v, d1);
    	g2 := new Gig(v, d2);
    	
    	assertEqual({}, b1.getGigs());
    	assertEqual({}, g1.getBands());
    	
    	result := g1.addBand(b1);
    	assertEqual({g1}, b1.getGigs());
    	assertEqual({b1}, g1.getBands());
    	
    	result := g2.addBand(b1);
    	result := g2.addBand(b2);
    	assertEqual({g1, g2}, b1.getGigs());
    	assertEqual({b1, b2}, g2.getBands());
    	
    );
    
    private testHireBand: () ==> ()
    testHireBand() == (
    	dcl eo: EventOrganizer, hb1: HireBand, hb2: HireBand;
    	
    	eo := new EventOrganizer("Event Organizer");
    	
    	assertEqual("Event Organizer", eo.getName());
    	
    	hb1 := new HireBand(eo, "Montijo Portugal", mk_Utilitys`Date(2017, 12, 31));
    	hb2 := new HireBand(eo, "Porto Portugal", mk_Utilitys`Date(2018, 03, 15));
    	
    	assertEqual({}, ab.listHireBandOffers());
    	
    	ab.addHireBandOffer(hb1);
    	ab.addHireBandOffer(hb2);
    	assertEqual({hb1, hb2}, ab.listHireBandOffers());
    );
    
    private testRoadieOffer: () ==> ()
    testRoadieOffer() == (
    	dcl b: Band, ro1: RoadieOffer, ro2: RoadieOffer;
    	
    	b := new Band("Band 1");
    	
    	ro1 := new RoadieOffer(b, <Engineer>);
    	ro2 := new RoadieOffer(b, <InstrumentTech>);
    	
    	assertEqual({}, ab.listRoadieOffers());
    	
    	ab.addRoadieOffer(ro1);
    	ab.addRoadieOffer(ro2);
    	assertEqual({ro1, ro2}, ab.listRoadieOffers());
    	
    	assertEqual({ro1}, ab.listRoadieOffers(<Engineer>));
    );
    
    private testPlaceOffer: () ==> ()
    testPlaceOffer() == (
    	dcl p1: Venue, p2: Studio, p3: Studio, plo: PlaceOwner, po1: PlaceOffer, po2: PlaceOffer, po3: PlaceOffer;
    	
    	plo := new PlaceOwner("Place Owner");
    	assertEqual("Place Owner", plo.getName());
    	
    	p1 := new Venue(plo, "Feira Portugal", 75, 2000, "Ok", "Ok");
    	p2 := new Studio(plo, "Porto Portugal", 25, false, true);
    	p3 := new Studio(plo, "Porto Portugal", 25, true, false);
    	
    	po1 := new PlaceOffer(p1);
    	po2 := new PlaceOffer(p2);
    	po3 := new PlaceOffer(p3);
    	
    	
    	assertEqual({}, ab.listPlaceOffers());
    	ab.addPlaceOffer(po1);
    	ab.addPlaceOffer(po2);
    	ab.addPlaceOffer(po3);
    	assertEqual({po1, po2, po3}, ab.listPlaceOffers());
    	
    	assertEqual({po1}, ab.listPlaceOffers(true, false, false));
    	assertEqual({po2}, ab.listPlaceOffers(false, false, true));
    	assertEqual({po3}, ab.listPlaceOffers(false, true, false));
    	
    );
    
    public static main: () ==> ()
    main() ==
    (
    	new JyveTest().testArtist();
    	new JyveTest().testAddArtistOffer();
    	new JyveTest().testBand();
    	new JyveTest().testBandRole();
    	new JyveTest().testGig();
    	new JyveTest().testHireBand();
    	new JyveTest().testRoadieOffer();
    	new JyveTest().testPlaceOffer();
    );
	functions
	-- TODO Define functiones here
	traces
	-- TODO Define Combinatorial Test Traces here
end JyveTest