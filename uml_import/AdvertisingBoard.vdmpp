class AdvertisingBoard
	instance variables
		artistOffers: set of ArtistOffer;
		bandRoleOffers: map JyveUtils`Instrument to (set of BandRole);
		roadieOffers: inmap JyveUtils`Task to (set of RoadieOffer);
		placeOffers: set of PlaceOffer;
		hireBandOffers: set of HireBand;
		gigs: set of Gig;
		static places: seq of Place := [];
		
	operations
		-- initializes the place where all the offers will be stored
		public AdvertisingBoard: () ==> AdvertisingBoard
		AdvertisingBoard() == ( 
			
			artistOffers := {};
			bandRoleOffers := {<Guitar> |-> {}, <Bass> |-> {}, <Drums> |-> {}, <Piano> |-> {}, <Vocal> |-> {}, <DJ> |-> {},
													<Saxophone> |-> {}, <Violin> |-> {}, <Accordeon> |-> {}, <Tuba> |-> {}, <DoubleBass> |-> {},
													<Viola> |-> {}, <Cello> |-> {}, <Xylophone> |-> {}, <Bagpipes> |-> {}};
			roadieOffers := {|->};
			placeOffers := {};
			hireBandOffers := {};
			gigs := {};
			
			return self;
		);
		
		-- lists the artist offers
		public listArtistOffers: () ==> set of ArtistOffer
		listArtistOffers() == (
			return artistOffers;
		)
		post artistOffers = artistOffers~;
		
		-- lists the artist offers where an artist plays a given instrument
		public listArtistOffers: JyveUtils`Instrument ==> set of ArtistOffer
		listArtistOffers(i) == (
			dcl list : set of ArtistOffer := {};
			
			for all artistOffer in set artistOffers do (
				if artistOffer.getArtist().playsInstrument(i) then
					list := list union {artistOffer}
			);
			
			return list;
		)
		post artistOffers = artistOffers~
				and forall artistOffer in set RESULT & artistOffer.getArtist().playsInstrument(i);
		
		-- lists all the band role offers 
		pure public listBandRoleOffers: () ==> set of BandRole
		listBandRoleOffers() == (
			dcl list: set of BandRole := {};
			
			for all bro in set rng bandRoleOffers do
				list := list union bro;
			
			return list;
		)
		post bandRoleOffers = bandRoleOffers~;
		
		-- lists all the band role offers of a given instrument
		pure public listBandRoleOffers: JyveUtils`Instrument ==> set of BandRole
		listBandRoleOffers(i) == (		
			return bandRoleOffers(i);
		)
		post bandRoleOffers = bandRoleOffers~
				and forall bandRoleOffer in set RESULT & i = bandRoleOffer.getRole();
		
		-- lists all the roadie offers
		pure public listRoadieOffers: () ==> set of RoadieOffer
		listRoadieOffers() == (
			dcl res: set of RoadieOffer := {};
			
			for all ro in set rng roadieOffers do
				res := res union ro;
			
			return res;
		)
		post roadieOffers = roadieOffers~;
		
		-- lists all the roadie offers of a given task
		public listRoadieOffers: JyveUtils`Task ==> set of RoadieOffer
		listRoadieOffers(task) == (
			return roadieOffers(task);
		)
		post roadieOffers = roadieOffers~;
		
		-- lists all the place offers (studios or venues)
		public listPlaceOffers: () ==> set of PlaceOffer
		listPlaceOffers() == (
			return placeOffers;
		)
		post placeOffers = placeOffers~;
		
		-- lists the place offers filtered, venues or studio (rehearsal or recording)
		public listPlaceOffers: bool * bool * bool ==> set of PlaceOffer
		listPlaceOffers(venue, rehearsal, recording) == (
			dcl list: set of PlaceOffer:= {};
			
			for all placeOffer in set placeOffers do (
				if venue and isofclass(Venue, placeOffer.getPlace()) then(
					list := list union {placeOffer};
				)		
				else if not venue and isofclass(Studio, placeOffer.getPlace()) then (
					dcl place: Studio := placeOffer.getPlace();
					if place.isRehearsal() and rehearsal then
						list := list union {placeOffer}
					elseif place.isRecording() and recording then
						list := list union {placeOffer}
				)
			);
			return list;
		)
		pre (venue and (not rehearsal and not recording)) 
			or (not venue and (rehearsal <> recording))
		post placeOffers = placeOffers~;
		
		-- lists all the available venues on a given date
		public listAvailableVenues: JyveUtils`Date ==> set of PlaceOffer
		listAvailableVenues(date) == (
			dcl list: set of PlaceOffer:= {};
		
			for all placeOffer in set placeOffers do(
				if isofclass(Venue, placeOffer.getPlace()) then(
					dcl venue: Venue := placeOffer.getPlace();
					if venue.isAvailable(date) then
						list := list union {placeOffer}
				)
			);
			
			return list;
		);
		
		-- lists all the offers for a band
		public listHireBandOffers: () ==> set of HireBand
		listHireBandOffers() == (
			return hireBandOffers;
		)
		post hireBandOffers = hireBandOffers~;
		
		-- lists all the gigs
		public listGigs: () ==> set of Gig
		listGigs() == (
			return gigs;
		)
		post gigs = gigs~;
		
		-- lists all the gigs on a venue
		public listGigs: Venue ==> set of Gig
		listGigs(v) == (
			dcl gs: set of Gig := {};
			
			for all g in set gigs do(
				if (g.getVenue() = v) then
					gs := gs union {g}
			);
		
			return gs;
		)
		post gigs = gigs~;
		
		-- lists all the gigs on a date
		public listGigs: JyveUtils`Date ==> set of Gig
		listGigs(d) == (
			dcl gs: set of Gig := {};
			
			for all g in set gigs do(
				if (g.getDate() = d) then
					gs := gs union {g}
			);
		
			return gs;
		)
		post gigs = gigs~;
		
		-- lists all the places
		public static listPlaces: () ==> seq of Place
		listPlaces() == (
			return places;
		)
		post places = places~;
		
		-- lists all the venues
		public static listVenues: () ==> seq of Venue
		listVenues() == (
			dcl res: seq of Venue := [];
			
			for all p in set elems places do (
				if isofclass(Venue, p) then
					res := res ^[p];
			);
			return res;
		)
		post places = places~;
		
		-- adds an artist offer to the board
		public addArtistOffer: ArtistOffer ==> ()
		addArtistOffer(ao) == (
			artistOffers := artistOffers union {ao};
		)
		pre ao not in set artistOffers
		post ao in set artistOffers;
		
		-- deletes an artist offer from the board
		public deleteArtistOffer: ArtistOffer ==> ()
		deleteArtistOffer(ao) == (
			artistOffers := artistOffers \ {ao};
		)
		pre ao in set artistOffers
		post ao not in set artistOffers;
		
		-- adds a band role offer to the board
		public addBandRoleOffer: BandRole ==> ()
		addBandRoleOffer(br) == (
			dcl newOffers: set of BandRole := bandRoleOffers(br.getRole()), newMap: map JyveUtils`Instrument to (set of BandRole);
			newOffers:= newOffers union {br};
			newMap := {br.getRole() |-> newOffers};
			bandRoleOffers := bandRoleOffers ++ newMap;
		)
		pre br not in set listBandRoleOffers()
		post br in set listBandRoleOffers();
		
		-- deletes a band role offer from the board
		public deleteBandRoleOffer: BandRole ==> ()
		deleteBandRoleOffer(br) == (
			dcl newOffers: set of BandRole := bandRoleOffers(br.getRole()), newMap: map JyveUtils`Instrument to (set of BandRole);
			newOffers:= newOffers \ {br};
			newMap := {br.getRole() |-> newOffers};
			bandRoleOffers := bandRoleOffers ++ newMap;
		)
		pre br in set listBandRoleOffers()
		post br not in set listBandRoleOffers();
		
		-- adds a roadie offer to the board
		public addRoadieOffer: RoadieOffer ==> ()
		addRoadieOffer(oo) == (
			dcl newOffers: set of RoadieOffer := {}, newInMap: inmap JyveUtils`Task to (set of RoadieOffer);
			
			if oo.getTask() in set dom roadieOffers then
				newOffers := roadieOffers(oo.getTask());
			
			newOffers := newOffers union {oo};
			newInMap := {oo.getTask() |-> newOffers};
			roadieOffers := roadieOffers ++ newInMap;
		)
		pre oo not in set listRoadieOffers()
		post oo in set listRoadieOffers();
		
		-- delete roadie offer from the board
		public deleteRoadieOffer: RoadieOffer ==> ()
		deleteRoadieOffer(oo) == (
			dcl newOffers: set of RoadieOffer := {}, newInMap: inmap JyveUtils`Task to (set of RoadieOffer);
			
			if oo.getTask() in set dom roadieOffers then
				newOffers := roadieOffers(oo.getTask());
			
			newOffers := newOffers \ {oo};
			newInMap := {oo.getTask() |-> newOffers};
			roadieOffers := roadieOffers ++ newInMap;
		)
		pre oo in set listRoadieOffers()
		post oo not in set listRoadieOffers();
		
		
		-- adds a place offer to the board
		public addPlaceOffer: PlaceOffer ==> ()
		addPlaceOffer(po) == (
			placeOffers := placeOffers union {po};
		)
		pre po not in set placeOffers
		post po in set placeOffers;
		
		-- deletes a place offer from the board
		public deletePlaceOffer: PlaceOffer ==> ()
		deletePlaceOffer(po) == (
			placeOffers := placeOffers \ {po};
		)
		pre po in set placeOffers
		post po not in set placeOffers;
		
		-- adds an offer to hire a band to the board
		public addHireBandOffer: HireBand ==> ()
		addHireBandOffer(hb) == (
			hireBandOffers := hireBandOffers union {hb};
		)
		pre hb not in set hireBandOffers
		post hb in set hireBandOffers;
		
		public deleteHireBandOffer: HireBand ==> ()
		deleteHireBandOffer(hb) == (
			hireBandOffers := hireBandOffers \ {hb};
		)
		pre hb in set hireBandOffers
		post hb not in set hireBandOffers;
		
				
		-- adds a gig
		public addGig: Gig ==> ()
		addGig(g) == (
			gigs := gigs union {g};
		)
		pre g not in set gigs
		post g in set gigs;
		
		-- adds a place
		public static addPlace: Place ==> ()
		addPlace(p) == (
			places := places ^[p];
		)
		pre p not in set elems places
		post p in set elems places; 
		


end AdvertisingBoard