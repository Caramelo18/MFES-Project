class AdvertisingBoard
	instance variables
		artistOffers: set of ArtistOffer;
		bandRoleOffers: map Utilitys`Instrument to (set of BandRole);
		roadieOffers: set of RoadieOffer;
		placeOffers: set of PlaceOffer;
		hireBandOffers: set of HireBand;
		gigs: set of Gig;
		initialized: bool := false;
		
	operations
		public AdvertisingBoard: () ==> AdvertisingBoard
		AdvertisingBoard() == ( 
			if initialized then return self;
			
			artistOffers := {};
			bandRoleOffers := {<Guitar> |-> {}, <Bass> |-> {}, <Drums> |-> {}, <Piano> |-> {}, <Vocal> |-> {}, <DJ> |-> {},
													<Saxophone> |-> {}, <Violin> |-> {}, <Accordeon> |-> {}, <Tuba> |-> {}, <DoubleBass> |-> {},
													<Viola> |-> {}, <Cello> |-> {}, <Xylophone> |-> {}, <Bagpipes> |-> {}};
			roadieOffers := {};
			placeOffers := {};
			hireBandOffers := {};
			gigs := {};
			
			initialized := true;
			
			return self;
		);
		
		
		public listArtistOffers: () ==> set of ArtistOffer
		listArtistOffers() == (
			return artistOffers;
		)
		post artistOffers = artistOffers~;
		
		
		public listArtistOffers: Utilitys`Instrument ==> set of ArtistOffer
		listArtistOffers(i) == (
			dcl list : set of ArtistOffer := {};
			
			for all artistOffer in set artistOffers do (
				if artistOffer.getArtist().playsInstrument(i) then
					list := list union {artistOffer}
			);
			
			return list;
		)
		post artistOffers = artistOffers~
				and forall artistOffer in set RESULT & artistOffer.getArtist().playsInstrument(i);
		
		
		pure public listBandRoleOffers: () ==> set of BandRole
		listBandRoleOffers() == (
			dcl list: set of BandRole := {};
			
			for all bro in set rng bandRoleOffers do
				list := list union bro;
			
			return list;
		)
		post bandRoleOffers = bandRoleOffers~;
		
		
		public listBandRoleOffers: Utilitys`Instrument ==> set of BandRole
		listBandRoleOffers(i) == (		
			return bandRoleOffers(i);
		)
		post bandRoleOffers = bandRoleOffers~
				and forall bandRoleOffer in set RESULT & i = bandRoleOffer.getRole();
		
		
		public listRoadieOffers: () ==> set of RoadieOffer
		listRoadieOffers() == (
			return roadieOffers;
		)
		post roadieOffers = roadieOffers~;
		
		public listRoadieOffers: Utilitys`Task ==> set of RoadieOffer
		listRoadieOffers(task) == (
			dcl list : set of RoadieOffer := {};
			
			for all roadieOffer in set roadieOffers do (
				if roadieOffer.getTask() = task then
					list := list union {roadieOffer}
			);
			
			return list;
		)
		post roadieOffers = roadieOffers~;
		
		
		public listPlaceOffers: () ==> set of PlaceOffer
		listPlaceOffers() == (
			return placeOffers;
		)
		post placeOffers = placeOffers~;
		
		public listPlaceOffers: bool * bool * bool ==> set of PlaceOffer
		listPlaceOffers(venue, rehearsal, recording) == (
			dcl list: set of PlaceOffer:= {};
			
			for all placeOffer in set placeOffers do (
				if venue and isofclass(Venue, placeOffer.getPlace()) then(
					list := list union {placeOffer};
				)		
				else if not venue and isofclass(Studio, placeOffer.getPlace()) then (
					dcl place: Studio := placeOffer.getPlace();
					if place.isRehearsal() and rehearsal then
						list := list union {placeOffer}
					elseif place.isRecording() and recording then
						list := list union {placeOffer}
				)
			);
			return list;
		)
		pre (venue and (not rehearsal and not recording)) 
			or (not venue and (rehearsal <> recording))
		post placeOffers = placeOffers~;
		
		public listAvailableVenues: Utilitys`Date ==> set of PlaceOffer
		listAvailableVenues(date) == (
			dcl list: set of PlaceOffer:= {};
		
			for all placeOffer in set placeOffers do(
				if isofclass(Venue, placeOffer.getPlace()) then(
					dcl venue: Venue := placeOffer.getPlace();
					if venue.isAvailable(date) then
						list := list union {placeOffer}
				)
			);
			
			return list;
		);
		
		
		public listHireBandOffers: () ==> set of HireBand
		listHireBandOffers() == (
			return hireBandOffers;
		)
		post hireBandOffers = hireBandOffers~;
		
		public listGigs: () ==> set of Gig
		listGigs() == (
			return gigs;
		)
		post gigs = gigs~;
		
		public listGigs: Venue ==> set of Gig
		listGigs(v) == (
			dcl gs: set of Gig := {};
			
			for all g in set gigs do(
				if (g.getVenue() = v) then
					gs := gs union {g}
			);
		
			return gs;
		)
		post gigs = gigs~;
		
		public listGigs: Utilitys`Date ==> set of Gig
		listGigs(d) == (
			dcl gs: set of Gig := {};
			
			for all g in set gigs do(
				if (g.getDate() = d) then
					gs := gs union {g}
			);
		
			return gs;
		)
		post gigs = gigs~;
		
		public addArtistOffer: ArtistOffer ==> ()
		addArtistOffer(ao) == (
			artistOffers := artistOffers union {ao};
		)
		pre ao not in set artistOffers
		post ao in set artistOffers;
		
		public addBandRoleOffer: BandRole ==> ()
		addBandRoleOffer(br) == (
			dcl newOffers: set of BandRole := bandRoleOffers(br.getRole()), newMap: map Utilitys`Instrument to (set of BandRole);
			newOffers:= newOffers union {br};
			newMap := {br.getRole() |-> newOffers};
			bandRoleOffers := bandRoleOffers ++ newMap;
		)
		pre br not in set listBandRoleOffers()
		post br in set listBandRoleOffers();
		
		public addRoadieOffer: RoadieOffer ==> ()
		addRoadieOffer(oo) == (
			roadieOffers := roadieOffers union {oo};
		)
		pre oo not in set roadieOffers
		post oo in set roadieOffers;
		
		public addPlaceOffer: PlaceOffer ==> ()
		addPlaceOffer(po) == (
			placeOffers := placeOffers union {po};
		)
		pre po not in set placeOffers
		post po in set placeOffers;
		
		public addHireBandOffer: HireBand ==> ()
		addHireBandOffer(hb) == (
			hireBandOffers := hireBandOffers union {hb};
		)
		pre hb not in set hireBandOffers
		post hb in set hireBandOffers;
		
		public addGig: Gig ==> ()
		addGig(g) == (
			gigs := gigs union {g};
		)
		pre g not in set gigs
		post g in set gigs;
		


end AdvertisingBoard