class AdvertisingBoard
	instance variables
		artistOffers: set of ArtistOffer;
		bandRoleOffers: set of BandRole;
		roadieOffers: set of RoadieOffer;
		placeOffers: set of PlaceOffer;
		hireBandOffers: set of HireBand;
		initialized: bool := false;
		
	operations
		public AdvertisingBoard: () ==> AdvertisingBoard
		AdvertisingBoard() == ( 
			if initialized then return self;
			
			artistOffers := {};
			bandRoleOffers := {};
			roadieOffers := {};
			placeOffers := {};
			hireBandOffers := {};
			
			initialized := true;
			
			return self;
		);
		
		
		public listArtistOffers: () ==> set of ArtistOffer
		listArtistOffers() == (
			return artistOffers;
		)
		post artistOffers = artistOffers~;
		
		
		public listArtistOffers: Utilitys`Instrument ==> set of ArtistOffer
		listArtistOffers(i) == (
			dcl list : set of ArtistOffer := {};
			
			for all artistOffer in set artistOffers do (
				if artistOffer.getArtist().playsInstrument(i) then
					list := list union {artistOffer}
			);
			
			return list;
		)
		post artistOffers = artistOffers~
				and forall artistOffer in set RESULT & artistOffer.getArtist().playsInstrument(i);
		
		
		public listBandRoleOffers: () ==> set of BandRole
		listBandRoleOffers() == (
			return bandRoleOffers;
		)
		post bandRoleOffers = bandRoleOffers~;
		
		
		public listBandRoleOffers: Utilitys`Instrument ==> set of BandRole
		listBandRoleOffers(i) == (
			dcl list : set of BandRole := {};
			
			for all bandRoleOffer in set bandRoleOffers do (
				if bandRoleOffer.getRole() = i then
					list := list union {bandRoleOffer}
			);
			
			return list;
		)
		post bandRoleOffers = bandRoleOffers~
				and forall bandRoleOffer in set RESULT & i = bandRoleOffer.getRole();
		
		
		public listRoadieOffers: () ==> set of RoadieOffer
		listRoadieOffers() == (
			return roadieOffers;
		)
		post roadieOffers = roadieOffers~;
		
		public listRoadieOffers: Utilitys`Task ==> set of RoadieOffer
		listRoadieOffers(task) == (
			dcl list : set of RoadieOffer := {};
			
			for all roadieOffer in set roadieOffers do (
				if roadieOffer.getTask() = task then
					list := list union {roadieOffer}
			);
			
			return list;
		)
		post roadieOffers = roadieOffers~;
		
		
		public listPlaceOffers: () ==> set of PlaceOffer
		listPlaceOffers() == (
			return placeOffers;
		)
		post placeOffers = placeOffers~;
		
		public listPlaceOffers: bool * bool * bool ==> set of PlaceOffer
		listPlaceOffers(studio, rehearsal, recording) == (
			dcl list: set of PlaceOffer:= {};
			
			for all placeOffer in set placeOffers do (
				if studio then(
					if isofclass(Studio, placeOffer) then
						list := list union {placeOffer};
				)		
				else (
					dcl place: Studio := placeOffer.getPlace();
					if place.isRehearsal() and rehearsal then
						list := list union {placeOffer}
					elseif place.isRecording() and recording then
						list := list union {placeOffer}
				)
			);
			return list;
		)
		pre (studio and (not rehearsal and not recording)) 
			or (not studio and (rehearsal <> recording))
		post placeOffers = placeOffers~;
		
		
		public listHireBandOffers: () ==> set of HireBand
		listHireBandOffers() == (
			return hireBandOffers;
		)
		post hireBandOffers = hireBandOffers~;
		
		
		public addArtistOffer: ArtistOffer ==> ()
		addArtistOffer(ao) == (
			artistOffers := artistOffers union {ao};
		)
		pre ao not in set artistOffers
		post ao in set artistOffers;
		
		public addBandRoleOffer: BandRole ==> ()
		addBandRoleOffer(br) == (
			bandRoleOffers := bandRoleOffers union {br};
		)
		pre br not in set bandRoleOffers
		post br in set bandRoleOffers;
		
		public addHireBandOffer: HireBand ==> ()
		addHireBandOffer(hb) == (
			hireBandOffers := hireBandOffers union {hb};
		)
		pre hb not in set hireBandOffers
		post hb in set hireBandOffers;
		


end AdvertisingBoard