class Gig
	instance variables
	  performingBands: set of (Band);
	  venue: Venue;
	  date: JyveUtils`Date;
	  
	  inv bandIsConsistent(); -- all the bands that participate in a gig must have the gig in their records
	  inv venueIsConsistent(); -- the venue where the gig is happening must have the gig in their records
	
	operations
		-- default gig constructor, receives a venue and a date as arguments
		public Gig : Venue * JyveUtils`Date ==> Gig
		Gig(v, d) == (
			dcl result: bool, venueGigs: set of Gig := v.gigs;
			venueGigs := venueGigs union {self};
			performingBands:= {};
			date:= d;
			atomic(
				venue:= v;
				result := v.setGigs(venueGigs);
			);
			return self;
		);
		
		-- adds a band to a gig
	  public addBand : Band  ==> bool
	  addBand(b) == (
	  	dcl complete: bool := false;
	  	dcl bandGigs: set of Gig := b.gigs;
	  	bandGigs := bandGigs union {self};
	  	
	  	atomic(
	  		performingBands := performingBands union {b};
	  		complete := b.setGigs(bandGigs);
	  	);
	  	
	  	return complete;
	  )
	  pre b not in set performingBands
	  post b in set performingBands
	  		and RESULT;
		
		-- returns the gig date
		pure public getDate: () ==> JyveUtils`Date
		getDate() == (
			return date;
		)
		post date = date~ and RESULT = date;
		
		-- returns the gig venue
		pure public getVenue: () ==> Venue
		getVenue() == (
			return venue;
		)
		post venue = venue~ and RESULT = venue;
		
		-- returns the band that will participate in the gig
		public getBands: () ==> set of Band
		getBands() == (
			return performingBands;
		)
		post performingBands = performingBands~ and RESULT = performingBands;
		
		pure private bandIsConsistent: () ==> bool
		bandIsConsistent() == (
			return forall pb in set performingBands &
		  		  self in set pb.gigs;
		);
		
		pure private venueIsConsistent: () ==> bool
		venueIsConsistent() == (
			return self in set venue.gigs;
		);
		
end Gig
