class Gig
	instance variables
	  performingBands: set of (Band);
	  venue: Venue;
	  date: Utilitys`Date;
	  
	  inv isConsistent();
	
	operations
		public Gig : Venue * Utilitys`Date ==> Gig
		Gig(v, d) == (
			performingBands:= {};
			venue:= v;
			date:= d;
			return self;
		);
		
	  public addBand : Band  ==> bool
	  addBand(b) == (
	  	dcl complete: bool := false;
	  	dcl bandGigs: set of Gig := b.gigs;
	  	bandGigs := bandGigs union {self};
	  	
	  	atomic(
	  		performingBands := performingBands union {b};
	  		complete := b.setGigs(bandGigs);
	  	);
	  	
	  	return complete;
	  )
	  pre b not in set performingBands
	  post b in set performingBands
	  		and RESULT;
	
		pure public getDate: () ==> Utilitys`Date
		getDate() == (
			return date;
		);
		
		public getBands: () ==> set of Band
		getBands() == (
			return performingBands;
		)
		post performingBands = performingBands~ and RESULT = performingBands;
		
		pure private isConsistent: () ==> bool
		isConsistent() == (
			return forall pb in set performingBands &
		  		  self in set pb.gigs;
		)
end Gig
